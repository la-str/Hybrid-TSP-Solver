"""
Contains code to process the log files generated by the large run of the
 classical solver algorithm. It writes the results (permutations, times) to an
 Excel file, creating a new sheet for each of the separate examples.

Dan Forbes and Lara Stroh - 2024
"""

import os
import re

import pandas as pd

# Initialize an empty list to store the data
data = []

# Walk through the logs directory
for root, dirs, files in os.walk("logs_large_run"):
    for file in files:
        if file.endswith(".txt"):
            # Construct the full file path
            file_path = os.path.join(root, file)

            # Extract latlon_filename, n_cities, n_clusters from the file path
            latlon_filename = re.search(
                r'logs_large_run/([^/]*)/', file_path).group(1)
            n_clusters = int(re.search(r'(\d+)_clusters', file_path).group(1))

            print(f"Processing {file_path}...")
            print(f"latlon_filename: {latlon_filename}")
            # print(f"n_cities: {n_cities}")
            print(f"n_clusters: {n_clusters}")

            # Open the log file and read its lines
            with open(file_path, 'r') as f:
                lines = f.readlines()

            # Initialize variables for cost and time
            cost: float | None = None
            time: float | None = None

            # Define variable for whether the algorithm used a seed
            uses_seed: bool

            # Iterate over the lines of the log file
            for i, line in enumerate(lines):

                # If the line conatins 'The full TSP consists of',
                #  extract n_cities
                if 'The TSP to be solved consists of' in line:
                    n_cities = int(re.search(r'of (\d+)', line).group(1))
                    continue

                if "Running with Seed" in line:
                    if "Running with Seed provided." in line:
                        uses_seed = True
                    elif "Running with Seed randomly generated." in line:
                        uses_seed = False
                    else:
                        raise ValueError(
                            "Can't determine if seed was provided or not.")
                    continue

                # If the line contains 'Initial cost value:',
                #  extract the cost from the next line
                if "Initial cost value:" in line:
                    cost = float(re.search(
                        r'Initial cost value: (\d+\.\d+)', line).group(1))
                    time = 0.

                # If the line contains 'Found improved permutation:',
                #  extract the cost and time from the next lines
                if 'Found improved permutation:' in line:
                    cost = float(re.search(
                        r'solution cost: (\d+\.\d+)', lines[i+2]).group(1))
                    time = float(re.search(
                        r'time: (\d+\.\d+)', lines[i+3]).group(1))

                # If both cost and time have been found,
                #  append the data to the list and reset cost and time
                if cost is not None and time is not None:
                    data.append(
                        [latlon_filename, n_cities, n_clusters,
                         uses_seed, time, cost])
                    cost = None
                    time = None

# Create a DataFrame from the data
df = pd.DataFrame(
    data,
    columns=["latlon_filename", "n_cities",
             "n_clusters", "uses_seed", "time", "cost"])

# Create an Excel writer object
writer = pd.ExcelWriter("results_large_run.xlsx", engine="xlsxwriter")

# Iterate over unique latlon_filenames
for latlon_filename in df["latlon_filename"].unique():
    # Filter the DataFrame for the current latlon_filename
    filtered_df = df[df["latlon_filename"] == latlon_filename]

    # Write the filtered DataFrame to a new sheet with the latlon_filename
    #  as the sheet name
    filtered_df.to_excel(writer, sheet_name=latlon_filename, index=False)

# Save the Excel file
writer._save()
